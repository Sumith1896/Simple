//////////////////////////////////////////////////////////////////////////
//
//	Filename: 	GameState.h
//
//	Purpose:	Controls the overall state of the app
//
//////////////////////////////////////////////////////////////////////////
#pragma once

#include "Helpers.h"

#define GAMESTATE_MENU_MAIN			1	//in the main menu
#define GAMESTATE_PLAYER_CONTROL	2	//directly controlling the main player

class GameState
{
private:

	int					m_nGameState;		//the current game state
	static GameState	*m_pinstance;		//instance to the singleton	
	bool				m_bInit;			//true if we been here before

	GameState(){};
	GameState(const GameState &a){};
	GameState &operator=(const GameState &a){};

public:

	//////////////////////////////////////////////////////////////////////////
	// 
	//	Function: 		DeleteInstance
	//
	//	Purpose:		Delete the instance of the class, and set the pointer to NULL
	//
	//////////////////////////////////////////////////////////////////////////
	static void DeleteInstance();

	//////////////////////////////////////////////////////////////////////////
	// 
	//	Function: 		GetInstance
	//
	//	Purpose:		Creates the first instance of this class and returns it's address.
	//
	//////////////////////////////////////////////////////////////////////////
	static GameState *GetInstance();

	//////////////////////////////////////////////////////////////////////////
	// 
	//	Function: 		Init
	//
	//	Purpose:		Initializes the GameState class
	//
	//////////////////////////////////////////////////////////////////////////
	void Init();

	//////////////////////////////////////////////////////////////////////////
	//INLINES
	//////////////////////////////////////////////////////////////////////////
	inline int GetGameState(){return m_nGameState;}

	inline int SetGameState(int nGameState){m_nGameState = nGameState;}
};
